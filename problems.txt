1. Can't (reasonably) get rid of .html/have custom routing
2. React is not a fan of dynamic script injection.
3. React is not a fan of device type detection so "responsiveness" depends on larger script injections.
4. I don't know React very well. I see it as a tool for modularizing initial instanciations and organizing, but it seems to want to be more of a live/overencompassing state manager which I don't like. I believe my code actively works AGAINST the role React tries its absolute hardest to play. I only implemented it as a buzzword to impress business folks who don't particularly have competence in/knowledge of the technology.
  Counterpoint: There is ONE third party React library which actually performs this exact functionality exceptionally well, however simply by my preference I prefer to keep such decisionmaking tied to javascript so it's not scoped and compartmentalized out of my view via javascript for whatever functionality reasons I may have to want access.
5. Used % based placement for vast majority of components. Tradeoff is visually impaired can NOT zoom in to make text/font size larger. Only way to do that is to physically make the window larger.
6. Many many payload injections which are script based. Not only is this considered "web development sacrilege" for numerous reasons, but users with javascript disabled will not have a good time (website won't work in any capacity).
  Rebuttle: Script size is negligible comparative to image size so this absurd obsession to minimize script payloads by any and all means necessary is downright silly in my opinion. Bandwidth/device computation capacity concerns have been grown out of in modern times and fearing them is living in the past. On top of that while I understand the sentiment of disabling js due to XSS and CSRF attacks, those who choose to do that know the repercussions... so face them here I suppose. No hard feelings, just is what it is. Also a overwhelming portion of the web uses React so disabling javascript impacts a reach far exceeding my site alone.
7. React-Helmet has an AWFUL bug. React-Helmet effectively works by updating the head tag via *state changes*. Here is what this means for me and why it is problematic. I inject code snippets via modules or capsules of code which then gets read by being placed in the header. The catch, given React-Helmet is what places them in the header in the first place in a state-based manner, is if I provide a module of code to be added to the head, but the javascript/text inside this module is identical character for character to another script I've injected, then it simply doesn't get injected again as React-Helmet believes it's "already there". This problem becomes present when I inject duplicate code which automates differences via javascript expressions rather than hardcoded differences.
  Fix: This had to be fixed very severely. I tried my best to make React-Helmet simply *always add the new script to the header*, however, it didn't seem to want to budge and allow that behavior. So my fix was simple. Hack the text to be "different" with a random character string injection in a location which doesn't actually alter the functionality of the code any, but which makes it not match character for character with any other scripts injected.
8. Browser differences are a real pain. It's one thing to make the site "responsive" to different sizings, but it's a whole different story trying to make that happen properly *across browsers*. As of my time writing this, there are no challenges which couldn't be hacked through for similar appearance, however performance-wise google chrome (the overwhelming market majority) stutters terrible on initial load and firefox runs great. Not much I can do about that.
9. "/aboutme.html" page is messed up on mobile because like countless other times, porting from PC functionality to phone doesn't always go 1-to-1. If you take advantage of the fact that mobile doesn't scroll lock the top of the page, and you partially scroll so the navbar is barely visible, open the navbar menu, and then close the navbar menu, you can see the menu slide up before disappearing. That's not supposed to happen because the navbar is typically at the top of the page. I *could* fix it by locking it inside a NEW div with overflow hidden, but I'm lazy and it's not worth the pain at this moment.